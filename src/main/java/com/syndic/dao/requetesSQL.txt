
USE syndic_db;


ALTER TABLE users
ADD COLUMN checkadmin TINYINT(1) NOT NULL;

ALTER TABLE syndic_db.users
MODIFY COLUMN checkadmin int;



DROP TABLE IF EXISTS users;
CREATE TABLE users (
    id INT NOT NULL AUTO_INCREMENT,
    u_name VARCHAR(50),
    u_pwd VARCHAR(255),
    u_email VARCHAR(50),
    u_mobile VARCHAR(20),
    checkadmin INT NOT NULL,
    PRIMARY KEY (id)
);

ALTER TABLE users
ADD COLUMN u_apartment_number VARCHAR(20),
ADD COLUMN u_building_number VARCHAR(20),
ADD COLUMN u_phone_number VARCHAR(20);

CREATE TABLE members (
    m_id INT AUTO_INCREMENT PRIMARY KEY,
    m_firstname VARCHAR(50),
    m_lastname VARCHAR(50),
    m_codepostal VARCHAR(10),
    m_phonenumber VARCHAR(15),
    m_fulladdress VARCHAR(255),
    m_mail VARCHAR(255),
    m_iduser INT,
    FOREIGN KEY (m_iduser) REFERENCES users(id)
);

CREATE TABLE syndics (
    s_id INT AUTO_INCREMENT PRIMARY KEY,
    s_firstname VARCHAR(50),
    s_lastname VARCHAR(50),
    s_codepostal VARCHAR(10),
    s_phonenumber VARCHAR(15),
    s_fulladdress VARCHAR(255),
    s_mail VARCHAR(255),
    s_iduser INT,
    FOREIGN KEY (s_iduser) REFERENCES users(id)
);


CREATE TABLE syndic_db.meetings (
    meeting_id INT AUTO_INCREMENT PRIMARY KEY,
    meeting_date DATE,
    meeting_time VARCHAR(50),
    meeting_topic TEXT,
    meeting_location TEXT,
    meeting_type VARCHAR(50),
    meeting_residence VARCHAR(50),
    meeting_conclusion TEXT,
    meeting_s_id INT, -- Ajout de la colonne syndic_id pour la référence au syndic
    FOREIGN KEY (meeting_s_id) REFERENCES Syndics(s_id) -- Clé étrangère liée à la table des syndics
);

CREATE TABLE Payments (
    payment_id INT AUTO_INCREMENT PRIMARY KEY,
    payment_code VARCHAR(50),
    payment_date DATE ,
    payment_amount DECIMAL(10, 2),
    payment_method VARCHAR(50),
    payment_type VARCHAR(50),
    payment_account_id INT,
    payment_member_id INT,
    payment_status VARCHAR(50)
);

CREATE TABLE Suppliers (
    supplier_id INT AUTO_INCREMENT PRIMARY KEY,
    supplier_name VARCHAR(150),
    supplier_email VARCHAR(250),
    supplier_phone VARCHAR(50),
    supplier_type VARCHAR(250),
    supplier_active BOOLEAN,
    supplier_rating VARCHAR(50),
    supplier_s_id INT
);


CREATE TABLE syndic_db.Incidents (
    incident_id INT PRIMARY KEY AUTO_INCREMENT,
    incident_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    incident_type VARCHAR(50) NOT NULL,
    incident_description TEXT,
    incident_status VARCHAR(20) NOT NULL,
    incident_resolution_date DATE,
    incident_s_id INT NOT NULL,
    FOREIGN KEY (incident_s_id) REFERENCES Syndics(s_id)
);

ALTER TABLE syndic_db.members
ADD COLUMN member_s_id INT,
ADD CONSTRAINT FOREIGN KEY (member_s_id) REFERENCES Syndics(s_id);

========================================================================================================================
pour target Syndic.war
C:\Users\amine\Desktop\amine\S4\DevOps\development-platform-alpha-deploy> mvn clean package

C:\Users\amine\Desktop\amine\S4\DevOps\development-platform-alpha-deploy> docker build -t syndic .

C:\Users\amine\Desktop\amine\S4\DevOps\development-platform-alpha-deploy> docker run -d -p 8080:8080 syndic

docker-compose up
docker-compose down

 docker exec -it development-platform-alpha-mysql-1 mysql -uamine -p1999 syndic_db

 docker volume ls
 docker volume rm development-platform-alpha_mysql-data

mvn clean install


========================================================================================================================
ALTER TABLE syndic_db.syndics
ADD COLUMN residence_name VARCHAR(50) UNIQUE,
ADD COLUMN residence_address VARCHAR(100),
ADD COLUMN residence_type VARCHAR(50),
ADD COLUMN residence_size INT,
ADD COLUMN apartment_count INT,
ADD COLUMN villa_count INT,
ADD COLUMN garden_count INT,
ADD COLUMN pool_count INT,
ADD COLUMN parking_count INT,
ADD COLUMN elevators_count INT,
ADD COLUMN security_system BOOLEAN;


CREATE TABLE syndic_db.News_communication (
    news_id INT AUTO_INCREMENT PRIMARY KEY,
    news_title VARCHAR(255) NOT NULL,
    news_content TEXT NOT NULL,
    news_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    news_category VARCHAR(100),
    news_attachment VARCHAR(255),
    news_s_id INT NOT NULL,
    FOREIGN KEY (news_s_id) REFERENCES Syndics(s_id));


CREATE TABLE syndic_db.Charges (
    charges_id INT AUTO_INCREMENT PRIMARY KEY,
    charge_name VARCHAR(50),
    charge_description TEXT,
    charge_amount DECIMAL(10, 2),
    charge_frequency VARCHAR(50),
    charge_category VARCHAR(50),
    charge_due_date VARCHAR(50),
    charge_s_id INT NOT NULL,
    FOREIGN KEY (charge_s_id) REFERENCES Syndics(s_id));


CREATE TABLE syndic_db.Charges (
    charges_id INT AUTO_INCREMENT PRIMARY KEY,
    charge_code VARCHAR(50)
    charge_name VARCHAR(50),
    charge_description TEXT,
    charge_amount DECIMAL(10, 2),
    charge_frequency VARCHAR(50),
    charge_category VARCHAR(50),
    charge_due_month VARCHAR(50)
 );

INSERT INTO syndic_db.Charges (charge_code, charge_name, charge_description, charge_amount, charge_frequency, charge_category, charge_due_month)
VALUES
('MNT-001', 'Entretien des espaces verts', 'Entretien des jardins et espaces verts', 800.00, 'Mensuelle', 'Entretien', '01'),
('RPR-001', 'Réparation des équipements', 'Réparation des équipements communs', 1200.00, 'Trimestrielle', 'Réparation', '01'),
('ELE-001', 'Électricité des parties communes', 'Éclairage et électricité des espaces communs', 1000.00, 'Mensuelle', 'Électricité', '01'),
('DCH-001', 'Gestion des déchets', 'Service de collecte et gestion des déchets', 700.00, 'Mensuelle', 'Déchets', '01'),
('ASS-001', 'Assurance bâtiment', 'Assurance pour les parties communes du bâtiment', 2000.00, 'Annuelle', 'Assurance', '31'),
('GST-001', 'Frais de gestion', 'Frais pour la gestion administrative de la résidence', 1500.00, 'Mensuelle', 'Gestion', '01'),
('NTL-001', 'Nettoyage des piscines', 'Service de nettoyage et entretien des piscines', 600.00, 'Mensuelle', 'Nettoyage', '01'),
('MNT-002', 'Maintenance des équipements de gym', 'Entretien des équipements de la salle de sport', 900.00, 'Trimestrielle', 'Maintenance', '01'),
('SEC-001', 'Sécurité incendie', 'Installation et maintenance des équipements de sécurité incendie', 3000.00, 'Annuelle', 'Sécurité', '31'),
('SEC-002', 'Système de surveillance', 'Maintenance du système de surveillance CCTV', 1500.00, 'Trimestrielle', 'Sécurité', '01');




CREATE TABLE syndic_db.expenses (
    expense_id INT AUTO_INCREMENT PRIMARY KEY,
    expense_code VARCHAR(50),
    expense_supplier_id INT,
    expense_amount DECIMAL(10, 2),
    expense_category VARCHAR(100),
    expense_payment_date DATE,
    expense_task_or_charge INT,
    expense_task_id INT,
    expense_charge_id INT,
    FOREIGN KEY (expense_charge_id) REFERENCES charges(charges_id)
);

CREATE TABLE syndic_db.Tasks (
    task_id INT AUTO_INCREMENT PRIMARY KEY,
    task_name VARCHAR(50),
    task_description VARCHAR(50),
    task_due_date DATE,
    task_status VARCHAR(50),
    task_s_id INT,
    task_created DATE
);

ALTER TABLE syndic_db.members
ADD COLUMN property_code INT UNIQUE,
ADD COLUMN property_address VARCHAR(250),
ADD COLUMN property_type VARCHAR(50),
ADD COLUMN property_size INT,
ADD COLUMN `co-ownership_fee` INT;
ALTER TABLE syndic_db.members CHANGE COLUMN `co-ownership_fee` `coOwnershipFee` INT;


CREATE TABLE syndic_db.accounts (
    account_id INT AUTO_INCREMENT PRIMARY KEY,
    account_number INT,
    account_type VARCHAR(50),
    account_balance DECIMAL(10,2),
    account_created_at DATE,
    account_syndic_id INT,
    FOREIGN KEY (account_syndic_id) REFERENCES syndics(s_id)
);
========================================================================================================================
minikube ip

kubectl get svc

kubectl apply -f kubernetes/mysql-deployment.yaml

kubectl apply -f kubernetes/tomcat-deployment.yaml

kubectl get pods

kubectl get svc

kubectl get deployment


========================================================================================================================


voila tout mes données et donne moi les graphes
public List<Charge> getCharges() throws SQLException {
        List<Charge> charges = new ArrayList<>();
        String query = "SELECT * FROM charges ";
        try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
            try (ResultSet resultSet = preparedStatement.executeQuery()) {
                while (resultSet.next()) {
                    int chargesId = resultSet.getInt("charges_id");
                    String chargeCode = resultSet.getString("charge_code");
                    String chargeName = resultSet.getString("charge_name");
                    String chargeDescription = resultSet.getString("charge_description");
                    Double chargeAmount = resultSet.getDouble("charge_amount");
                    String chargeFrequency = resultSet.getString("charge_frequency");
                    String chargeCategory = resultSet.getString("charge_category");
                    String chargeDueMonth = resultSet.getString("charge_due_month");

                    Charge charge = new Charge(chargesId, chargeCode, chargeName, chargeDescription, chargeAmount, chargeFrequency, chargeCategory, chargeDueMonth);
                    charges.add(charge);
                }
            }
        }
        return charges; // Retourner la liste de réunions
    }

public List<Incident> getIncidentBySyndicId(int syndicId) throws SQLException {
        List<Incident> incidents = new ArrayList<>();
        String query = "SELECT * FROM incidents WHERE incident_s_id = ?";
        try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
            preparedStatement.setInt(1, syndicId);
            try (ResultSet resultSet = preparedStatement.executeQuery()) {
                while (resultSet.next()) {

                    int incidentId = resultSet.getInt("incident_id");
                    Date incidentDate = resultSet.getDate("incident_date");
                    String incidentType = resultSet.getString("incident_type");
                    String incidentDescription = resultSet.getString("incident_description");
                    String incidentStatus = resultSet.getString("incident_status");
                    Date incidentResolutionDate = resultSet.getDate("incident_resolution_date");

                    Incident incident= new Incident(incidentId, incidentDate, incidentType, incidentDescription, incidentStatus, incidentResolutionDate, syndicId);
                    incidents.add(incident); // Ajouter la réunion à la liste
                }
            }
        }
        return incidents; // Retourner la liste de réunions
    }


 public List<Meeting> getMeetingBySyndicId(int syndicId) throws SQLException {
        List<Meeting> meetings = new ArrayList<>();
        String query = "SELECT * FROM meetings WHERE meeting_s_id = ?";
        try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
            preparedStatement.setInt(1, syndicId);
            try (ResultSet resultSet = preparedStatement.executeQuery()) {
                while (resultSet.next()) {
                    int meetingId = resultSet.getInt("meeting_id");
                    Date meetingDate = resultSet.getDate("meeting_date");
                    String meetingTime = resultSet.getString("meeting_time");
                    String meetingTopic = resultSet.getString("meeting_topic");
                    String meetingLocation = resultSet.getString("meeting_location");
                    String meetingType = resultSet.getString("meeting_type");
                    String meetingResidence = resultSet.getString("meeting_residence");
                    String meetingConclusion = resultSet.getString("meeting_conclusion");
                    Meeting meeting = new Meeting(meetingId, meetingDate, meetingTime, meetingTopic, meetingLocation,
                            meetingType, meetingResidence, meetingConclusion, syndicId);
                    meetings.add(meeting); // Ajouter la réunion à la liste
                }
            }
        }
        return meetings; // Retourner la liste de réunions
    }


    public List<Payment> getPaymentsBySyndic(int syndicId) {
        List<Payment> payments = new ArrayList<>();
        String query = "SELECT * FROM payments WHERE payment_syndic_id = ?";
        try (PreparedStatement pstmt = connection.prepareStatement(query)) {
            pstmt.setInt(1, syndicId);
            try (ResultSet rs = pstmt.executeQuery()) {
                while (rs.next()) {
                    Payment payment = new Payment();
                    payment.setCode(rs.getInt("payment_code"));
                    payment.setDate(rs.getString("payment_date"));
                    payment.setAmount(rs.getDouble("payment_amount"));
                    payment.setMethod(rs.getString("payment_method"));
                    payment.setType(rs.getString("payment_type"));
                  //  payment.setAccount_id(rs.getInt("payment_account_id"));
                    payment.setMember_id(rs.getInt("payment_member_id"));
                    payment.setStatus(rs.getString("payment_status"));
                    payment.setSyndicId(rs.getInt("payment_syndic_id"));
                    payments.add(payment);
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return payments;}



public List<Task> getTasksBySyndic(int syndicId) {
        List<Task> tasks = new ArrayList<>();
        String query = "SELECT * FROM tasks WHERE task_s_id = ?";
        try (PreparedStatement pstmt = connection.prepareStatement(query)) {
            pstmt.setInt(1, syndicId);
            try (ResultSet rs = pstmt.executeQuery()) {
                while (rs.next()) {
                    Task task = new Task();
                    task.setTaskId(rs.getInt("task_id"));
                    task.setTaskName(rs.getString("task_name"));
                    task.setTaskDescription(rs.getString("task_description"));
                    task.setTaskDueDate(rs.getString("task_due_date"));
                    task.setTaskStatus(rs.getString("task_status"));
                    task.setTaskSId(rs.getInt("task_s_id"));
                    task.setTaskAmount(rs.getDouble("task_amount"));
                    task.setTaskSupplierId(rs.getInt("task_supplier_id"));

                    tasks.add(task);
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return tasks;


 public List<Supplier> getAllSuppliers(int syndicId) {
        List<Supplier> suppliers = new ArrayList<>();
        String sql = "SELECT * FROM Suppliers WHERE supplier_s_id = ? ";

        try (PreparedStatement stmt = connection.prepareStatement(sql)) {
            stmt.setInt(1, syndicId);
            try (ResultSet rs = stmt.executeQuery()) {
                while (rs.next()) {
                    Supplier supplier = new Supplier();

                    supplier.setSupplier_id(rs.getInt("supplier_id"));
                    supplier.setSupplier_name(rs.getString("supplier_name"));
                    supplier.setSupplier_email(rs.getString("supplier_email"));
                    supplier.setSupplier_phone(rs.getString("supplier_phone"));
                    supplier.setSupplier_type(rs.getString("supplier_type"));
                    supplier.setSupplier_active(rs.getBoolean("supplier_active"));
                    supplier.setSupplier_rating(rs.getString("supplier_rating"));
                    suppliers.add(supplier);
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

        return suppliers;